// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleDashboardAPI.Data;

#nullable disable

namespace VehicleDashboardAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241214052528_UpdateDashboard")]
    partial class UpdateDashboard
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VehicleDashboardAPI.Models.DashboardData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BatteryLow")
                        .HasColumnType("bit");

                    b.Property<int>("BatteryPercentage")
                        .HasColumnType("int");

                    b.Property<int>("BatteryTemperature")
                        .HasColumnType("int");

                    b.Property<bool>("ChargingState")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckEngine")
                        .HasColumnType("bit");

                    b.Property<string>("GearRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MotorHighSpeed")
                        .HasColumnType("bit");

                    b.Property<int>("MotorRPM")
                        .HasColumnType("int");

                    b.Property<bool>("ParkingBrakeEngaged")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DashboardData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BatteryLow = false,
                            BatteryPercentage = 80,
                            BatteryTemperature = 30,
                            ChargingState = true,
                            CheckEngine = false,
                            GearRatio = "3.2",
                            MotorHighSpeed = false,
                            MotorRPM = 1500,
                            ParkingBrakeEngaged = false
                        },
                        new
                        {
                            Id = 2,
                            BatteryLow = false,
                            BatteryPercentage = 60,
                            BatteryTemperature = 35,
                            ChargingState = false,
                            CheckEngine = false,
                            GearRatio = "3.5",
                            MotorHighSpeed = false,
                            MotorRPM = 2000,
                            ParkingBrakeEngaged = false
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
